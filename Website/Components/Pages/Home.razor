@page "/"
@using System.Text.RegularExpressions
@using Model.DataAccess.Entities
@using Model.Features.Queries.GetTags
@using Website.Api
@inject ITagClient TagClient
<PageTitle>Tabela Tagów</PageTitle>

<h3 class="mb-3">Tabela Tagów</h3>

<div class="mb-3 d-flex align-items-center">
    <label class="me-2">Sortuj według:</label>
    <select class="form-select w-auto" @bind="Sort">
        <option value="name">Nazwa</option>
        <option value="percentage">Procent</option>
    </select>

    <label class="ms-3 me-2">Kolejność:</label>
    <select class="form-select w-auto" @bind="Order">
        <option value="asc">Rosnąco</option>
        <option value="desc">Malejąco</option>
    </select>
    
    <label class="me-2">Strona:</label>
    <select class="form-select w-auto" 
            @bind-Value="PageTag" 
            @bind-Value:event="onchange">
        @for (int i = 1; i <= 10; i++)
        {
            <option value="@i">@i</option>
        }
    </select>

    <label class="ms-3 me-2">Rozmiar Strony:</label>
    <select class="form-select w-auto" 
            @bind-Value="PageSize" 
            @bind-Value:event="onchange">
        @for (int i = 10; i <= 100; i += 10)
        {
            <option value="@i">@i</option>
        }
    </select>
    <button class="btn btn-primary ms-3" @onclick="ReloadData">Zastosuj</button>
    <button class="btn btn-danger ms-3" @onclick="RefreshTags">Odśwież baze tagów</button>
    
</div>
<div class="mb-3 d-flex align-items-center">
    <label class="me-2">Wiersze na stronę:</label>
    <select class="form-select w-auto" @bind="TableSize" @bind:event="onchange">
        <option value="5">5</option>
        <option value="10">10</option>
        <option value="20">20</option>
        <option value="50">50</option>
    </select>
</div>

<table class="table table-striped table-bordered table-hover">
    <thead class="table-dark">
        <tr>
            <th @onclick="() => SortBy(nameof(Tag.TagId))" style="cursor:pointer">
                TagId @(RenderSortIcon(nameof(Tag.TagId)))
            </th>
            <th @onclick="() => SortBy(nameof(Tag.Name))" style="cursor:pointer">
                Nazwa @(RenderSortIcon(nameof(Tag.Name)))
            </th>
            <th @onclick="() => SortBy(nameof(Tag.Count))" style="cursor:pointer">
                Licznik @(RenderSortIcon(nameof(Tag.Count)))
            </th>
            <th @onclick="() => SortBy(nameof(Tag.Percentage))" style="cursor:pointer">
                Procent @(RenderSortIcon(nameof(Tag.Percentage)))
            </th>
        </tr>
    </thead>
    <tbody>
        @foreach (var tag in PaginatedTags)
        {
            <tr>
                <td>@tag.TagId</td>
                <td>@tag.Name</td>
                <td>@tag.Count</td>
                <td>@($"{tag.Percentage:F2}%")</td>
            </tr>
        }
    </tbody>
</table>

<nav>
    <ul class="pagination">
        <li class="page-item @(CurrentPage == 1 ? "disabled" : "")">
            <button class="page-link" @onclick="PrevPage">Poprzednia</button>
        </li>

        @for (int i = 1; i <= TotalPages; i++)
        {
            var pageNumber = i;
            <li class="page-item @(CurrentPage == pageNumber ? "active" : "")">
                <button class="page-link" @onclick="(() => GoToPage(pageNumber))">@pageNumber</button>
            </li>
        }

        <li class="page-item @(CurrentPage == TotalPages ? "disabled" : "")">
            <button class="page-link" @onclick="NextPage">Następna</button>
        </li>
    </ul>
</nav>

@code {
    private List<Tag> Tags = new();
    private int CurrentPage = 1;
    private int TableSize = 5;
    private int PageSize = 5;
    private int PageTag = 1;
    private string Sort = "name";   
    private string Order = "desc";  
    
    private string SortColumn = nameof(Tag.TagId);
    private bool SortDescending = false;

    private IEnumerable<Tag> SortedTags =>
        SortColumn switch
        {
            nameof(Tag.Name) => SortDescending ? Tags.OrderByDescending(t => t.Name) : Tags.OrderBy(t => t.Name),
            nameof(Tag.Count) => SortDescending ? Tags.OrderByDescending(t => t.Count) : Tags.OrderBy(t => t.Count),
            nameof(Tag.Percentage) => SortDescending ? Tags.OrderByDescending(t => t.Percentage) : Tags.OrderBy(t => t.Percentage),
            _ => SortDescending ? Tags.OrderByDescending(t => t.TagId) : Tags.OrderBy(t => t.TagId)
        };

    private IEnumerable<Tag> PaginatedTags =>
        SortedTags.Skip((CurrentPage - 1) * TableSize).Take(TableSize);

    private int TotalPages => (int)Math.Ceiling(Tags.Count / (double)TableSize);

    protected override async Task OnInitializedAsync()
    {
        var query = new GetTagsQuery
        {
            Order = "desc",
            Sort = "name",
            Page = 1,
            PageSize = 10
        };
        Tags = await TagClient.GetTags(query);
    }

    private void PrevPage()
    {
        if (CurrentPage > 1) CurrentPage--;
    }

    private void NextPage()
    {
        if (CurrentPage < TotalPages) CurrentPage++;
    }

    private void GoToPage(int page)
    {
        if (page < 1) page = 1;
        if (page > TotalPages) page = TotalPages;
        CurrentPage = page;
    }

    private void SortBy(string column)
    {
        if (SortColumn == column)
            SortDescending = !SortDescending;
        else
        {
            SortColumn = column;
            SortDescending = false;
        }
        CurrentPage = 1;
    }

    private MarkupString RenderSortIcon(string column)
    {
        if (SortColumn != column) return new MarkupString("");
        var icon = SortDescending ? "↓" : "↑";
        return new MarkupString($"<span>{icon}</span>");
    }


    private async Task ReloadData()
    {
        var query = new GetTagsQuery
        {
            Order = Order,
            Sort = Sort,
            Page = PageTag,
            PageSize = PageSize
        };
        Tags = await TagClient.GetTags(query);
    }

    private async Task RefreshTags()
    {
        await TagClient.RefreshTags();
        await ReloadData();
    }
}